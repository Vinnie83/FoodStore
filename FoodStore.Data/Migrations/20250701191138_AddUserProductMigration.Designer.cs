// <auto-generated />
using System;
using FoodStore.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FoodStore.Data.Migrations
{
    [DbContext(typeof(FoodStoreDbContext))]
    [Migration("20250701191138_AddUserProductMigration")]
    partial class AddUserProductMigration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FoodStore.Data.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("FoodStore.Data.Models.Brand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("CountryOfOrigin")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.ToTable("Brands");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Dole"
                        },
                        new
                        {
                            Id = 2,
                            CountryOfOrigin = "Turkey",
                            Name = "Hrisa 13"
                        },
                        new
                        {
                            Id = 3,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Moravsko selo"
                        },
                        new
                        {
                            Id = 4,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Meggle"
                        },
                        new
                        {
                            Id = 5,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Activia"
                        },
                        new
                        {
                            Id = 6,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Danone"
                        },
                        new
                        {
                            Id = 7,
                            CountryOfOrigin = "Germany",
                            Name = "Sonnenweg"
                        },
                        new
                        {
                            Id = 8,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Harmonica"
                        },
                        new
                        {
                            Id = 9,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Gradus"
                        },
                        new
                        {
                            Id = 10,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Tandem"
                        },
                        new
                        {
                            Id = 11,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Naroden"
                        },
                        new
                        {
                            Id = 12,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Ambarica"
                        },
                        new
                        {
                            Id = 13,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Boni"
                        },
                        new
                        {
                            Id = 14,
                            CountryOfOrigin = "Greece",
                            Name = "Stella"
                        },
                        new
                        {
                            Id = 15,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Melissa"
                        },
                        new
                        {
                            Id = 16,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Simid"
                        },
                        new
                        {
                            Id = 17,
                            CountryOfOrigin = "Germany",
                            Name = "Mestemacher"
                        },
                        new
                        {
                            Id = 18,
                            CountryOfOrigin = "Bulgaria",
                            Name = "7 days"
                        },
                        new
                        {
                            Id = 19,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Benjamissimo"
                        },
                        new
                        {
                            Id = 20,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Nestle"
                        },
                        new
                        {
                            Id = 21,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Belvita"
                        },
                        new
                        {
                            Id = 22,
                            CountryOfOrigin = "Germany",
                            Name = "Leibnitz"
                        },
                        new
                        {
                            Id = 23,
                            CountryOfOrigin = "Austria",
                            Name = "Loacker"
                        },
                        new
                        {
                            Id = 24,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Chio"
                        },
                        new
                        {
                            Id = 25,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Milka"
                        },
                        new
                        {
                            Id = 26,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Krina"
                        },
                        new
                        {
                            Id = 27,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Coca Cola"
                        },
                        new
                        {
                            Id = 28,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Fanta"
                        },
                        new
                        {
                            Id = 29,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Hipp"
                        },
                        new
                        {
                            Id = 30,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Fino"
                        },
                        new
                        {
                            Id = 31,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Duracell"
                        },
                        new
                        {
                            Id = 32,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Medix"
                        },
                        new
                        {
                            Id = 33,
                            CountryOfOrigin = "Bulgaria",
                            Name = "Pur"
                        });
                });

            modelBuilder.Entity("FoodStore.Data.Models.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Fruits and vegetables"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Milk and eggs"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Meat and fish"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sausages and deli"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Bread and pastry"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Sweets and snacks"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Package foods"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Beverages"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Baby products"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Household products"
                        });
                });

            modelBuilder.Entity("FoodStore.Data.Models.Order", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("int");

                    b.Property<decimal>("TotalAmount")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("FoodStore.Data.Models.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ProductId")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("FoodStore.Data.Models.Product", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrandId")
                        .HasColumnType("int");

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("nvarchar(80)");

                    b.Property<decimal>("Price")
                        .HasPrecision(18, 2)
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<int>("SupplierId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("BrandId");

                    b.HasIndex("CategoryId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrandId = 1,
                            CategoryId = 1,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-157.jpg",
                            IsDeleted = false,
                            Name = "Banana",
                            Price = 2.30m,
                            Quantity = 150,
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 2,
                            BrandId = 2,
                            CategoryId = 1,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-109.jpg",
                            IsDeleted = false,
                            Name = "Avocado",
                            Price = 4.70m,
                            Quantity = 20,
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 3,
                            BrandId = 3,
                            CategoryId = 1,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-395.jpg",
                            IsDeleted = false,
                            Name = "Potato",
                            Price = 3.20m,
                            Quantity = 200,
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 4,
                            BrandId = 2,
                            CategoryId = 1,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-102.jpg",
                            IsDeleted = false,
                            Name = "Onion",
                            Price = 2.10m,
                            Quantity = 100,
                            SupplierId = 5
                        },
                        new
                        {
                            Id = 5,
                            BrandId = 4,
                            CategoryId = 2,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-11242.jpg",
                            IsDeleted = false,
                            Name = "Yogurt Meggle",
                            Price = 1.80m,
                            Quantity = 50,
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 6,
                            BrandId = 5,
                            CategoryId = 2,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-10247.jpg",
                            IsDeleted = false,
                            Name = "Yogurt Activia Naturalna",
                            Price = 2.10m,
                            Quantity = 60,
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 7,
                            BrandId = 6,
                            CategoryId = 2,
                            ImageUrl = "https://powellsnl.ca/media/uploads/gs1/.thumbnails/05680008218_1.png/05680008218_1-650x0-padded-%23fff.png",
                            IsDeleted = false,
                            Name = "Yogurt Danone Vanilla",
                            Price = 2.50m,
                            Quantity = 20,
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 8,
                            BrandId = 7,
                            CategoryId = 2,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-11026.jpg",
                            IsDeleted = false,
                            Name = "Butter Sonnenweg",
                            Price = 4.10m,
                            Quantity = 35,
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 9,
                            BrandId = 8,
                            CategoryId = 2,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-10608.jpg",
                            IsDeleted = false,
                            Name = "Milk Harmonica",
                            Price = 5.10m,
                            Quantity = 20,
                            SupplierId = 4
                        },
                        new
                        {
                            Id = 10,
                            BrandId = 9,
                            CategoryId = 3,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-2115.jpg",
                            IsDeleted = false,
                            Name = "Chicken Gradus",
                            Price = 5.10m,
                            Quantity = 30,
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 11,
                            BrandId = 10,
                            CategoryId = 3,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-14157.jpg",
                            IsDeleted = false,
                            Name = "Minced meat Tandem",
                            Price = 8.50m,
                            Quantity = 50,
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 12,
                            BrandId = 11,
                            CategoryId = 4,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-14062.jpg",
                            IsDeleted = false,
                            Name = "Salami Naroden Hamburgski",
                            Price = 4.30m,
                            Quantity = 30,
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 13,
                            BrandId = 12,
                            CategoryId = 4,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-14289.jpg",
                            IsDeleted = false,
                            Name = "Ambarica Chichovtsi",
                            Price = 6.50m,
                            Quantity = 30,
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 14,
                            BrandId = 13,
                            CategoryId = 4,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-14267.jpg",
                            IsDeleted = false,
                            Name = "Boni Sausage",
                            Price = 5.50m,
                            Quantity = 30,
                            SupplierId = 1
                        },
                        new
                        {
                            Id = 15,
                            BrandId = 14,
                            CategoryId = 5,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-30036.jpg",
                            IsDeleted = false,
                            Name = "Couscous Stella",
                            Price = 3.10m,
                            Quantity = 50,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 16,
                            BrandId = 15,
                            CategoryId = 5,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-30011.jpg",
                            IsDeleted = false,
                            Name = "Couscous Melissa",
                            Price = 3.30m,
                            Quantity = 30,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 17,
                            BrandId = 16,
                            CategoryId = 5,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-30662.jpg",
                            IsDeleted = false,
                            Name = "Bread Simid",
                            Price = 2.40m,
                            Quantity = 60,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 18,
                            BrandId = 17,
                            CategoryId = 5,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-30478.jpg",
                            IsDeleted = false,
                            Name = "Bread Mestemacher",
                            Price = 2.40m,
                            Quantity = 15,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 19,
                            BrandId = 18,
                            CategoryId = 6,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-55101.jpg",
                            IsDeleted = false,
                            Name = "Bake Rolls Spinach",
                            Price = 1.30m,
                            Quantity = 50,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 20,
                            BrandId = 19,
                            CategoryId = 6,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-159011.jpg",
                            IsDeleted = false,
                            Name = "Chocolate Benjamissimo Caramel",
                            Price = 6.40m,
                            Quantity = 22,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 21,
                            BrandId = 20,
                            CategoryId = 6,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-50242.jpg",
                            IsDeleted = false,
                            Name = "Biscuits Nestle Zhiten Dar",
                            Price = 2.40m,
                            Quantity = 30,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 22,
                            BrandId = 21,
                            CategoryId = 6,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-51979.jpg",
                            IsDeleted = false,
                            Name = "Biscuits Belvita wholegrain",
                            Price = 1.30m,
                            Quantity = 32,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 23,
                            BrandId = 22,
                            CategoryId = 6,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-51690.jpg",
                            IsDeleted = false,
                            Name = "Cookies Leibnitz butter",
                            Price = 2.80m,
                            Quantity = 32,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 24,
                            BrandId = 23,
                            CategoryId = 6,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-50015.jpg",
                            IsDeleted = false,
                            Name = "Biscuits Loacker Noisette",
                            Price = 5.60m,
                            Quantity = 21,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 25,
                            BrandId = 24,
                            CategoryId = 6,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-55311.jpg",
                            IsDeleted = false,
                            Name = "Chips Chio Salted",
                            Price = 3.70m,
                            Quantity = 30,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 26,
                            BrandId = 25,
                            CategoryId = 6,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-50419.jpg",
                            IsDeleted = false,
                            Name = "Chocolate Cookies Milka",
                            Price = 3.80m,
                            Quantity = 15,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 27,
                            BrandId = 26,
                            CategoryId = 7,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-31041.jpg",
                            IsDeleted = false,
                            Name = "Beans Krina Extra",
                            Price = 2.80m,
                            Quantity = 25,
                            SupplierId = 2
                        },
                        new
                        {
                            Id = 28,
                            BrandId = 27,
                            CategoryId = 8,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-40062.jpg",
                            IsDeleted = false,
                            Name = "Coca Cola Original",
                            Price = 2.40m,
                            Quantity = 80,
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 29,
                            BrandId = 28,
                            CategoryId = 8,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-40124.jpg",
                            IsDeleted = false,
                            Name = "Fanta Orange",
                            Price = 3.20m,
                            Quantity = 54,
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 30,
                            BrandId = 29,
                            CategoryId = 9,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-38038.jpg",
                            IsDeleted = false,
                            Name = "Baby Puree Hipp Pumpkin",
                            Price = 3.40m,
                            Quantity = 14,
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 31,
                            BrandId = 30,
                            CategoryId = 10,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-90050.jpg",
                            IsDeleted = false,
                            Name = "Aluminium Foil Fino",
                            Price = 3.60m,
                            Quantity = 20,
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 32,
                            BrandId = 31,
                            CategoryId = 10,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-90049.jpg",
                            IsDeleted = false,
                            Name = "Batteries duracell AAA",
                            Price = 8.90m,
                            Quantity = 25,
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 33,
                            BrandId = 32,
                            CategoryId = 10,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-80275.jpg",
                            IsDeleted = false,
                            Name = "Washing-up Liquid Medix",
                            Price = 2.10m,
                            Quantity = 20,
                            SupplierId = 3
                        },
                        new
                        {
                            Id = 34,
                            BrandId = 33,
                            CategoryId = 10,
                            ImageUrl = "https://optima.bg/data/ufiles/images/catalog/main/big/Optima-80055.jpg",
                            IsDeleted = false,
                            Name = "Washing-up Liquid Pur Apple",
                            Price = 3.15m,
                            Quantity = 18,
                            SupplierId = 3
                        });
                });

            modelBuilder.Entity("FoodStore.Data.Models.Supplier", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.HasKey("Id");

                    b.ToTable("Suppliers");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            EmailAddress = "maxtrade@info.bg",
                            Name = "Maxtrade",
                            Phone = "0898 753 546"
                        },
                        new
                        {
                            Id = 2,
                            EmailAddress = "shopmaster@info.com",
                            Name = "Shopmaster",
                            Phone = "0878 783 456"
                        },
                        new
                        {
                            Id = 3,
                            EmailAddress = "unitrade@info.bg",
                            Name = "Unitrade",
                            Phone = "0888 784 569"
                        },
                        new
                        {
                            Id = 4,
                            EmailAddress = "brother99@gmail.com",
                            Name = "Brother99",
                            Phone = "0898 345 908"
                        },
                        new
                        {
                            Id = 5,
                            EmailAddress = "moni@mail.bg",
                            Name = "Moni",
                            Phone = "0877 848 098"
                        });
                });

            modelBuilder.Entity("FoodStore.Data.Models.UserProduct", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("UserId", "ProductId");

                    b.HasIndex("ProductId");

                    b.ToTable("UsersProducts");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("FoodStore.Data.Models.Order", b =>
                {
                    b.HasOne("FoodStore.Data.Models.ApplicationUser", "User")
                        .WithMany("Orders")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("FoodStore.Data.Models.OrderItem", b =>
                {
                    b.HasOne("FoodStore.Data.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStore.Data.Models.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Order");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("FoodStore.Data.Models.Product", b =>
                {
                    b.HasOne("FoodStore.Data.Models.Brand", "Brand")
                        .WithMany("Products")
                        .HasForeignKey("BrandId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStore.Data.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("FoodStore.Data.Models.Supplier", "Supplier")
                        .WithMany("Products")
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");

                    b.Navigation("Supplier");
                });

            modelBuilder.Entity("FoodStore.Data.Models.UserProduct", b =>
                {
                    b.HasOne("FoodStore.Data.Models.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("FoodStore.Data.Models.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("FoodStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("FoodStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FoodStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("FoodStore.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FoodStore.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("FoodStore.Data.Models.Brand", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FoodStore.Data.Models.Category", b =>
                {
                    b.Navigation("Products");
                });

            modelBuilder.Entity("FoodStore.Data.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("FoodStore.Data.Models.Product", b =>
                {
                    b.Navigation("OrderItems");
                });

            modelBuilder.Entity("FoodStore.Data.Models.Supplier", b =>
                {
                    b.Navigation("Products");
                });
#pragma warning restore 612, 618
        }
    }
}
